[{"D:\\ed-xam\\src\\App.js":"1","D:\\ed-xam\\src\\reportWebVitals.js":"2","D:\\ed-xam\\src\\index.js":"3"},{"size":4968,"mtime":1606542682482,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1606200695961,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1606459051887,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"180da3r",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\ed-xam\\src\\App.js",["15","16"],"import React, { Component } from 'react';\nimport './App.css';\nimport Tesseract from 'tesseract.js';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      uploads: [],\n      patterns: [],\n      documents: [],\n      score:0 ,\n      keywords:[]\n    };\n  }\n\n  handleChange = (event) => {\n    if (event.target.files[0]) {\n      var uploads = []\n      for (var key in event.target.files) {\n        if (!event.target.files.hasOwnProperty(key)) continue;\n        let upload = event.target.files[key]\n        uploads.push(URL.createObjectURL(upload))\n      }\n      this.setState({\n        uploads: uploads\n      })\n    } else {\n      this.setState({\n        uploads: []\n      })\n    }\n  }\n\n  handleKeywordChange = (e) => {\n   // console.log(e.target.value);\n\n   this.setState({\n     keywords:e.target.value.toString().replaceAll(\" \",\"\").split(\",\")\n    })\n\n  }\n\n  generateText = () => {\n    let uploads = this.state.uploads\n  \n    for(var i = 0; i < uploads.length; i++) {\n      console.log(\"file: \"+uploads[i]);\n      \n      Tesseract.recognize(uploads[i],\n        'eng',\n        {\n          logger: m=>console.log(m)\n        }\n      )\n      .catch(err => {\n        console.error(err)\n      })\n      .then(result => {\n        console.log(\"Out: \"+JSON.stringify(result['data'].text));\n        \n        // Get Confidence score\n        let confidence = result.confidence\n  \n        // Get full output\n        let text = result['data'].text\n        console.log(\"output: \"+text);\n        // Get codes\n        let pattern = /\\b\\w{10,10}\\b/g\n        let patterns = text.match(pattern);\n  \n        // Update state\n        this.setState({ \n          patterns: this.state.patterns.concat(patterns),\n          documents: this.state.documents.concat({\n            pattern: patterns,\n            text: text,\n            confidence: confidence,\n          })\n        })\n    \n      })\n    \n    }\n  }\n\n  render() {\n    return (\n      \n      <div className=\"app\">\n        \n        <nav className={'navbar navbar-dark'}>\n          <a className={\"navbar-brand\"}>Ed.Xam</a>\n        </nav>\n\n        \n        <header className=\"header\">\n          <h1>Ed.Xam</h1>\n          <br></br>\n          <p><i>Ed.Xam is an AI based Exam Analysis tool that aseeses the solutions.</i></p>\n        </header>\n\n       \n        { /* File uploader */ }\n        <section className=\"hero\">\n          \n          <label className=\"fileUploaderContainer\">\n            <b>Click here to upload test images.</b>\n            <input type=\"file\" id=\"fileUploader\" onChange={this.handleChange} multiple />\n          </label>\n\n\n          <div>\n          { \n          this.state.uploads.map((value, index) => {\n            return <img key={index} src={value} width=\"100px\" />\n          }) \n          }\n          </div>\n\n          <label className=\"fileUploaderContainer\">\n            <p>\n              <b>Enter keywords to match in the answer.</b>\n            </p>\n\n            <p style={{fontSize:'small'}}> \n              Note - Enter the keywords separated by comma (,).\n            </p>                \n              <textarea  placeholder=\"eg. Network, Server, Client, ...\"  onChange={this.handleKeywordChange} style={{padding:0,margin:0, width:'100%', height:'3em',}}></textarea>\n          </label>\n          \n          <button onClick={this.generateText} className=\"button\">\n            <span style={{fontSize:'large'}}>\n            Analyze\n            </span>\n            </button>\n        </section>\n\n\n        { /* Results */ }\n        <section className=\"results\">\n          { this.state.documents.map((value, index) => {\n            \n            var score;\n\n            score=0;\n\n            for(var i in this.state.keywords){\n                \n              score=score+value.text.split(this.state.keywords[i]).length-1;\n            }\n\n\n            console.log(\"Score \"+score)\n            return (\n              <div key={index} className=\"results__result\">\n\n                <div className=\"results__result__info\">\n               \n              <h5 style={{fontSize:'large',padding:'0.3em'}}>\n                Student {index+1}\n              </h5>\n\n               <img width=\"50px\" src=\"https://www.classifapp.com/wp-content/uploads/2017/09/avatar-placeholder.png\" alt=\"user\"></img>\n\n               <div className=\"results__result__score\">\n                    <small><strong>Score:</strong> {((score/this.state.keywords.length)*100).toPrecision(5)}%</small>\n                  </div>\n\n                {/*   <div className=\"results__result__info__codes\">\n                    <small><strong>Confidence Score:</strong> {value.confidence}</small>\n                  </div> */}\n\n\n                  <div className=\"results__result__info__text\">\n                    <small><strong>Full Answer:</strong> {value.text}</small>\n                  </div>\n                </div>\n              </div>\n            )\n          }) }\n        </section>\n      </div>\n    )\n  }\n\n}\n\nexport default App;","D:\\ed-xam\\src\\reportWebVitals.js",[],"D:\\ed-xam\\src\\index.js",[],{"ruleId":"17","severity":1,"message":"18","line":95,"column":11,"nodeType":"19","endLine":95,"endColumn":41},{"ruleId":"20","severity":1,"message":"21","line":118,"column":20,"nodeType":"19","endLine":118,"endColumn":65},"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images."]